import { Justification } from "../paragraph/par-style.js";
import { Xml } from "../utils/xml.js";
export class SvgPainter {
    constructor(content) {
        const root = document.createElementNS(SvgPainter.svgNS, 'svg');
        const width = content.clientWidth.toString();
        root.setAttribute('id', 'svg');
        root.setAttribute('width', width);
        root.setAttribute('height', '500');
        content.appendChild(root);
        this._svg = root;
        this._root = root;
    }
    get svg() {
        return this._svg;
    }
    paintText(x, y, width, fitWidth, text, color, justification, fontFamily, fontSize, bold, italic) {
        const newText = document.createElementNS(SvgPainter.svgNS, 'text');
        this._setFont(newText, fontFamily, fontSize, bold, italic);
        this._setColor(newText, color);
        this._setHorizontalAlignment(newText, x, width, justification, fitWidth);
        this._setVerticalAlignment(newText, y, fontSize);
        const textNode = document.createTextNode(text);
        newText.appendChild(textNode);
        this._svg.appendChild(newText);
        this._lastText = newText;
    }
    measureLastText() {
        let rect;
        if (this._lastText !== undefined) {
            const box = this._lastText.getBBox();
            rect = {
                x: box.x,
                y: box.y,
                width: box.width,
                height: box.height
            };
        }
        else {
            rect = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
        }
        return rect;
    }
    paintLine(x1, y1, x2, y2, color, thickness) {
        const line = document.createElementNS(SvgPainter.svgNS, "line");
        line.setAttribute("x1", x1.toString());
        line.setAttribute("y1", y1.toString());
        line.setAttribute("x2", x2.toString());
        line.setAttribute("y2", y2.toString());
        line.setAttribute("stroke", `#${color}`);
        line.setAttribute("stroke-width", thickness.toString());
        this._svg.appendChild(line);
    }
    paintPicture(x, y, width, height, pic) {
        if (pic !== undefined) {
            const rect = document.createElementNS(SvgPainter.svgNS, "image");
            rect.setAttribute("x", `${x}`);
            rect.setAttribute("y", `${y}`);
            rect.setAttribute("width", `${width}`);
            rect.setAttribute("height", `${height}`);
            this.svg.appendChild(rect);
            pic.getImageUrl().then(url => {
                rect.setAttribute("xlink:href", `${url}`);
                rect.setAttribute("href", `${url}`);
            }).catch(error => {
                console.log(`ERROR during rendering: ${error}`);
            });
        }
    }
    clear() {
        while (this.svg.lastChild) {
            this.svg.removeChild(this.svg.lastChild);
        }
    }
    setWidth(newWidth) {
        const width = Xml.getAttribute(this.svg, "width");
        if (width !== undefined) {
            this._svg.setAttribute("width", `${newWidth}`);
            const root = this._svg.parentElement;
            if (root !== null) {
                root.setAttribute("width", `${newWidth}`);
            }
        }
    }
    ensureHeight(newHeight) {
        const height = Xml.getAttribute(this.svg, "height");
        if (height !== undefined) {
            const heightNum = parseFloat(height);
            const maxY = Math.max(heightNum, newHeight);
            if (maxY > heightNum) {
                this._svg.setAttribute("height", `${maxY}`);
                const root = this._svg.parentElement;
                if (root !== null) {
                    root.setAttribute("height", `${maxY}`);
                }
            }
        }
    }
    startLink(url) {
        const a = document.createElementNS(SvgPainter.svgNS, "a");
        a.setAttribute("href", url);
        this._svg = a;
        this._root.appendChild(this._svg);
    }
    endLink() {
        if (this._svg !== this._root) {
            this._svg = this._root;
        }
    }
    _setFont(textNode, fontFamily, fontSize, bold, italic) {
        textNode.setAttribute('font-family', fontFamily);
        textNode.setAttribute('font-size', fontSize.toString());
        if (bold) {
            textNode.setAttribute('font-weight', 'bold');
        }
        if (italic) {
            textNode.setAttribute('font-style', 'italic');
        }
    }
    _setColor(textNode, color) {
        textNode.setAttribute('fill', `#${color}`);
    }
    _setHorizontalAlignment(textNode, x, width, justification, fitWidth) {
        switch (justification) {
            case Justification.both:
                textNode.setAttribute('x', x.toString());
                if (fitWidth) {
                    textNode.setAttribute('textLength', width.toString());
                    textNode.setAttribute('lengthAdjust', 'spacing');
                }
                break;
            case Justification.right:
                const right = x + width;
                textNode.setAttribute('x', right.toString());
                textNode.setAttribute('text-anchor', "end");
                break;
            case Justification.center:
                const center = x + width / 2;
                textNode.setAttribute('x', center.toString());
                textNode.setAttribute('text-anchor', "middle");
                break;
            case Justification.left:
            default:
                textNode.setAttribute('x', x.toString());
                textNode.setAttribute('text-anchor', "start");
                break;
        }
    }
    _setVerticalAlignment(textNode, y, _fontSize) {
        textNode.setAttribute('y', y.toString());
    }
}
SvgPainter.svgNS = 'http://www.w3.org/2000/svg';
//# sourceMappingURL=data:application/json;base64,