import { Point } from "../math/point.js";
import { ShapeGuide } from "./shape-guide.js";
import { Ellipse } from "../math/ellipse.js";
class PathSegment {
    constructor() {
        this._offset = new Point(0, 0);
        this._scaling = new Point(1, 1);
    }
    translate(offset) {
        this._offset = offset;
    }
    scale(scaling) {
        this._scaling = scaling;
    }
    convertPoint(point, guide) {
        return point.convertToPoint(guide).translate(this._offset).scale(this._scaling);
    }
}
class CloseSegment extends PathSegment {
    getEndPoint(_guide, _startPoint) {
        return new Point(0, 0);
    }
    buildPath(_guide, _startPoint) {
        return " Z";
    }
    clone() {
        return new CloseSegment();
    }
}
class MoveTo extends PathSegment {
    constructor(point) {
        super();
        this.point = point;
    }
    getEndPoint(guide, _startPoint) {
        return this.point.convertToPoint(guide);
    }
    buildPath(guide, _startPoint) {
        const point = this.convertPoint(this.point, guide);
        return ` M ${point.x} ${point.y}`;
    }
    clone() {
        return new MoveTo(this.point);
    }
}
class LineTo extends MoveTo {
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.point, guide);
    }
    buildPath(guide, _startPoint) {
        const point = this.convertPoint(this.point, guide);
        return ` L ${point.x} ${point.y}`;
    }
    clone() {
        return new LineTo(this.point);
    }
}
class ArcTo extends PathSegment {
    constructor(sweepAngle, startAngle, radiusX, radiusY) {
        super();
        this.sweepAngle = sweepAngle;
        this.startAngle = startAngle;
        this.radiusX = radiusX;
        this.radiusY = radiusY;
    }
    getEndPoint(guide, startPoint) {
        const startAngle = guide.getValue(this.startAngle);
        const sweepAngle = guide.getValue(this.sweepAngle);
        const radiusX = guide.getValue(this.radiusX) * this._scaling.x;
        const radiusY = guide.getValue(this.radiusY) * this._scaling.y;
        const ellipse = Ellipse.fromSinglePoint(startPoint, startAngle, radiusX, radiusY);
        return ellipse.pointAtAngle(startAngle + sweepAngle);
    }
    buildPath(guide, startPoint) {
        const la = guide.getValue(this.sweepAngle) > Math.PI ? "1" : "0";
        const radiusX = guide.getValue(this.radiusX) * this._scaling.x;
        const radiusY = guide.getValue(this.radiusY) * this._scaling.y;
        const endPoint = this.getEndPoint(guide, startPoint);
        return ` A ${radiusX} ${radiusY} 0 ${la} 1 ${endPoint.x} ${endPoint.y}`;
    }
    clone() {
        return new ArcTo(this.sweepAngle, this.startAngle, this.radiusX, this.radiusY);
    }
}
class CubicBezierTo extends PathSegment {
    constructor(endPoint, control1, control2) {
        super();
        this.endPoint = endPoint;
        this.control1 = control1;
        this.control2 = control2;
    }
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.endPoint, guide);
    }
    buildPath(guide, _startPoint) {
        const endPoint = this.convertPoint(this.endPoint, guide);
        const control1 = this.convertPoint(this.control1, guide);
        const control2 = this.convertPoint(this.control2, guide);
        return ` C ${control1.x} ${control1.y}, ${control2.x} ${control2.y}, ${endPoint.x} ${endPoint.y}`;
    }
    clone() {
        return new CubicBezierTo(this.endPoint, this.control1, this.control2);
    }
}
class QuadBezierTo extends PathSegment {
    constructor(endPoint, control) {
        super();
        this.endPoint = endPoint;
        this.control = control;
    }
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.endPoint, guide);
    }
    buildPath(guide, startPoint) {
        const endPoint = this.convertPoint(this.endPoint, guide);
        const control = this.convertPoint(this.control, guide);
        const twoThird = 2 / 3;
        const cubic1 = startPoint.translate(Point.difference(control, startPoint).scale(twoThird));
        const cubic2 = endPoint.translate(Point.difference(control, endPoint).scale(twoThird));
        return ` C ${cubic1.x} ${cubic1.y}, ${cubic2.x} ${cubic2.y}, ${endPoint.x} ${endPoint.y}`;
    }
    clone() {
        return new QuadBezierTo(this.endPoint, this.control);
    }
}
export class Shape {
    constructor() {
        this.width = 1;
        this.height = 1;
        this.fillColor = undefined;
        this.lineColor = undefined;
        this.guide = new ShapeGuide(this);
        this.segments = [];
        this._path = undefined;
    }
    translate(offset) {
        this.segments.forEach(segment => {
            segment.translate(offset);
        });
    }
    scale(scaling) {
        this.segments.forEach(segment => {
            segment.scale(scaling);
        });
    }
    addSegmentMove(point) {
        this.segments.push(new MoveTo(point));
    }
    addSegmentLine(point) {
        this.segments.push(new LineTo(point));
    }
    addSegmentArc(sweepAngle, startAngle, radiusX, radiusY) {
        this.segments.push(new ArcTo(sweepAngle, startAngle, radiusX, radiusY));
    }
    addSegmentQuadBezier(endPoint, control) {
        this.segments.push(new QuadBezierTo(endPoint, control));
    }
    addSegmentCubicBezier(point, control1, control2) {
        this.segments.push(new CubicBezierTo(point, control1, control2));
    }
    addSegmentClose() {
        this.segments.push(new CloseSegment());
    }
    buildPath() {
        if (this._path === undefined) {
            this._path = "";
            this.guide.evaluate();
            let currentPoint = new Point(0, 0);
            this.segments.forEach((segment => {
                this._path += segment.buildPath(this.guide, currentPoint);
                currentPoint = segment.getEndPoint(this.guide, currentPoint);
            }));
        }
        return this._path;
    }
    performLayout(bounds) {
        const scalingX = bounds.width / this.width;
        const scalingY = bounds.height / this.height;
        this.scale(new Point(scalingX, scalingY));
        this.translate(bounds.topLeft);
    }
    clone() {
        const clone = new Shape();
        clone.width = this.width;
        clone.height = this.height;
        clone.guide = this.guide;
        clone.lineColor = this.lineColor;
        clone.fillColor = this.fillColor;
        clone.segments = this.segments.map((segment) => segment.clone());
        return clone;
    }
}
//# sourceMappingURL=data:application/json;base64,