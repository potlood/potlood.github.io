import { Point } from "../utils/geometry/point.js";
import { Ellipse } from "../utils/geometry/ellipse.js";
import { Angle } from "../utils/geometry/angle.js";
class PathSegment {
    constructor() {
        this._offset = new Point(0, 0);
        this._scaling = new Point(1, 1);
    }
    translate(offset) {
        this._offset = offset;
    }
    scale(scaling) {
        this._scaling = scaling;
    }
    convertPoint(point, guide) {
        return point.convertToPoint(guide).scale(this._scaling).translate(this._offset);
    }
}
class CloseSegment extends PathSegment {
    getEndPoint(_guide, _startPoint) {
        return new Point(0, 0);
    }
    buildPath(_guide, _startPoint) {
        return " Z";
    }
    clone() {
        return new CloseSegment();
    }
}
class MoveTo extends PathSegment {
    constructor(point) {
        super();
        this.point = point;
    }
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.point, guide);
    }
    buildPath(guide, _startPoint) {
        const point = this.convertPoint(this.point, guide);
        return ` M ${point.x} ${point.y}`;
    }
    clone() {
        return new MoveTo(this.point);
    }
}
class LineTo extends MoveTo {
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.point, guide);
    }
    buildPath(guide, _startPoint) {
        const point = this.convertPoint(this.point, guide);
        return ` L ${point.x} ${point.y}`;
    }
    clone() {
        return new LineTo(this.point);
    }
}
class ArcTo extends PathSegment {
    constructor(sweepAngle, startAngle, radiusX, radiusY) {
        super();
        this.sweepAngle = sweepAngle;
        this.startAngle = startAngle;
        this.radiusX = radiusX;
        this.radiusY = radiusY;
    }
    getEndPoint(guide, startPoint, overrideSweepAngle) {
        const startAngle = this._getAngleValue(guide, this.startAngle, false);
        let sweepAngle = overrideSweepAngle || this._getAngleValue(guide, this.sweepAngle, true);
        const radiusX = guide.getValue(this.radiusX) * this._scaling.x;
        const radiusY = guide.getValue(this.radiusY) * this._scaling.y;
        const ellipse = Ellipse.fromSinglePoint(startPoint, startAngle, radiusX, radiusY);
        return ellipse.pointAtAngle(startAngle.add(sweepAngle));
    }
    buildPath(guide, startPoint) {
        let sweepAngle = this._getAngleValue(guide, this.sweepAngle, true);
        const clockwise = this._clockwise(guide);
        const radiusX = guide.getValue(this.radiusX) * this._scaling.x;
        const radiusY = guide.getValue(this.radiusY) * this._scaling.y;
        const endPoint = this.getEndPoint(guide, startPoint);
        if (this._fullRotation(guide)) {
            const midPoint = this.getEndPoint(guide, startPoint, Angle.fromNormalized(0.5));
            const firstHalfPath = this._buildInternalPath(midPoint, Math.PI, radiusX, radiusY, true);
            const secondHalfPath = this._buildInternalPath(endPoint, Math.PI, radiusX, radiusY, true);
            return `${firstHalfPath}${secondHalfPath}`;
        }
        else {
            return this._buildInternalPath(endPoint, sweepAngle.toRadians(), radiusX, radiusY, clockwise);
        }
    }
    clone() {
        return new ArcTo(this.sweepAngle, this.startAngle, this.radiusX, this.radiusY);
    }
    _buildInternalPath(endPoint, sweepAngle, radiusX, radiusY, clockwise) {
        const largeArc = (sweepAngle > Math.PI) ? "1" : "0";
        const sweep = (clockwise) ? "1" : "0";
        return ` A ${radiusX} ${radiusY} 0 ${largeArc} ${sweep} ${endPoint.x} ${endPoint.y}`;
    }
    _getAngleValue(guide, variable, addFullRound) {
        const val = guide.getValue(variable);
        const angle = Angle.fromRotation(val);
        angle.round(addFullRound);
        return angle;
    }
    _clockwise(guide) {
        const val = guide.getValue(this.sweepAngle);
        return val > 0;
    }
    _fullRotation(guide) {
        const val = guide.getValue(this.sweepAngle);
        return Angle.fromRotation(val).toNormalized() === 1;
    }
}
class CubicBezierTo extends PathSegment {
    constructor(endPoint, control1, control2) {
        super();
        this.endPoint = endPoint;
        this.control1 = control1;
        this.control2 = control2;
    }
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.endPoint, guide);
    }
    buildPath(guide, _startPoint) {
        const endPoint = this.convertPoint(this.endPoint, guide);
        const control1 = this.convertPoint(this.control1, guide);
        const control2 = this.convertPoint(this.control2, guide);
        return ` C ${control1.x} ${control1.y}, ${control2.x} ${control2.y}, ${endPoint.x} ${endPoint.y}`;
    }
    clone() {
        return new CubicBezierTo(this.endPoint, this.control1, this.control2);
    }
}
class QuadBezierTo extends PathSegment {
    constructor(endPoint, control) {
        super();
        this.endPoint = endPoint;
        this.control = control;
    }
    getEndPoint(guide, _startPoint) {
        return this.convertPoint(this.endPoint, guide);
    }
    buildPath(guide, startPoint) {
        const endPoint = this.convertPoint(this.endPoint, guide);
        const control = this.convertPoint(this.control, guide);
        const twoThird = 2 / 3;
        const cubic1 = startPoint.translate(Point.difference(control, startPoint).scale(twoThird));
        const cubic2 = endPoint.translate(Point.difference(control, endPoint).scale(twoThird));
        return ` C ${cubic1.x} ${cubic1.y}, ${cubic2.x} ${cubic2.y}, ${endPoint.x} ${endPoint.y}`;
    }
    clone() {
        return new QuadBezierTo(this.endPoint, this.control);
    }
}
export class ShapePath {
    constructor(guide, filledIn = true, stroked = true) {
        this.segments = [];
        this._path = undefined;
        this._guide = guide;
        this.filledIn = filledIn;
        this.stroked = stroked;
    }
    translate(offset) {
        this.segments.forEach(segment => {
            segment.translate(offset);
        });
    }
    scale(scaling) {
        this.segments.forEach(segment => {
            segment.scale(scaling);
        });
    }
    moveTo(point) {
        this.segments.push(new MoveTo(point));
    }
    lineTo(point) {
        this.segments.push(new LineTo(point));
    }
    arcTo(sweepAngle, startAngle, radiusX, radiusY) {
        this.segments.push(new ArcTo(sweepAngle, startAngle, radiusX, radiusY));
    }
    quadBezierTo(endPoint, control) {
        this.segments.push(new QuadBezierTo(endPoint, control));
    }
    cubicBezierTo(point, control1, control2) {
        this.segments.push(new CubicBezierTo(point, control1, control2));
    }
    close() {
        this.segments.push(new CloseSegment());
    }
    buildPath() {
        if (this._path === undefined) {
            this._path = "";
            this._guide.evaluate();
            let currentPoint = new Point(0, 0);
            this.segments.forEach(segment => {
                this._path += segment.buildPath(this._guide, currentPoint);
                currentPoint = segment.getEndPoint(this._guide, currentPoint);
            });
            this._path = this._path.substr(1);
        }
        return this._path;
    }
    clone() {
        const clone = new ShapePath(this._guide);
        clone.segments = this.segments.map(segment => segment.clone());
        return clone;
    }
}
//# sourceMappingURL=data:application/json;base64,