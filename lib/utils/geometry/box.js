import { InSequence } from "../in-sequence.js";
import { Point } from "./point.js";
export class Box {
    constructor(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    get left() {
        return this.x;
    }
    get top() {
        return this.y;
    }
    get right() {
        return this.x + this.width;
    }
    get bottom() {
        return this.y + this.height;
    }
    get topLeft() {
        return new Point(this.left, this.top);
    }
    get topRight() {
        return new Point(this.right, this.top);
    }
    get bottomLeft() {
        return new Point(this.left, this.bottom);
    }
    get bottomRight() {
        return new Point(this.right, this.bottom);
    }
    translate(x, y) {
        return new Box(this.x + x, this.y + y, this.width, this.height);
    }
    addBorder(left, top, right, bottom) {
        return new Box(this.x - left, this.y - top, this.width + left + right, this.height + top + bottom);
    }
    addBordersAndMargins(set, margins, _rowOrder, _columnOrder) {
        const start = ((set.borderStart !== undefined) ? set.borderStart.size : 0) + margins.cellMarginStart;
        const end = ((set.borderEnd !== undefined) ? set.borderEnd.size : 0) + margins.cellMarginEnd;
        const top = ((set.borderTop !== undefined) ? set.borderTop.size : 0) + margins.cellMarginTop;
        const bottom = ((set.borderBottom !== undefined) ? set.borderBottom.size : 0) + margins.cellMarginBottom;
        return this.addBorder(start, top, end, bottom);
    }
    addSpacing(spacing) {
        return this.addBorder(spacing, spacing, spacing, spacing);
    }
    subtractBorder(left, top, right, bottom) {
        return new Box(this.x + left, this.y + top, this.width - left - right, this.height - top - bottom);
    }
    subtractBordersAndMargins(set, margins, _rowOrder, _columnOrder) {
        const start = ((set.borderStart !== undefined) ? set.borderStart.size : 0) + margins.cellMarginStart;
        const end = ((set.borderEnd !== undefined) ? set.borderEnd.size : 0) + margins.cellMarginEnd;
        const top = ((set.borderTop !== undefined) ? set.borderTop.size : 0) + margins.cellMarginTop;
        const bottom = ((set.borderBottom !== undefined) ? set.borderBottom.size : 0) + margins.cellMarginBottom;
        return this.subtractBorder(start, top, end, bottom);
    }
    subtractSpacing(spacing) {
        return this.subtractBorder(spacing, spacing, spacing, spacing);
    }
    includePoint(arg1, arg2) {
        const x = (arg1 instanceof Point) ? arg1.x : arg1;
        const y = (arg1 instanceof Point) ? arg1.y : arg2;
        const newX = Math.min(this.x, x);
        const newY = Math.min(this.y, y);
        const newWidth = Math.max(this.x + this.width, x + this.width) - newX;
        const newHeight = Math.min(this.y + this.height, y + this.height) - newY;
        return new Box(newX, newY, newWidth, newHeight);
    }
    placeInRectangle(width, height, xPos, yPos) {
        let x = 0;
        let y = 0;
        if (xPos === InSequence.Middle) {
            x = this.x + (this.width / 2) - (width / 2);
        }
        else if (xPos === InSequence.Last) {
            x = this.right - width;
        }
        if (yPos === InSequence.Middle) {
            y = this.y + (this.height / 2) - (height / 2);
        }
        else if (xPos === InSequence.Last) {
            y = this.bottom - height;
        }
        return new Box(x, y, width, height);
    }
    addOnTopOf(other, spacing = 0) {
        const width = Math.max(this.width, other.width);
        const height = this.height + other.height + spacing;
        return new Box(this.x, this.y, width, height);
    }
    addInFrontOf(other, spacing = 0) {
        const width = this.width + other.width + spacing;
        const height = Math.max(this.height, other.height);
        return new Box(this.x, this.y, width, height);
    }
    intersectX(x) {
        return this.left <= x && this.right >= x;
    }
    intersectY(y) {
        return this.top <= y && this.bottom >= y;
    }
    intersectPoint(point) {
        return this.intersectX(point.x) && this.intersectY(point.y);
    }
    clone() {
        return new Box(this.x, this.y, this.width, this.height);
    }
    toString() {
        return `{${this.x}, ${this.y}, ${this.width}, ${this.height}}`;
    }
}
//# sourceMappingURL=data:application/json;base64,